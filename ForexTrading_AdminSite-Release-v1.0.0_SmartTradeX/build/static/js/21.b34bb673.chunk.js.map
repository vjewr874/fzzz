{"version":3,"sources":["views/pages/maintain/index.js"],"names":["DataTableServerSide","useState","items","setItems","isLoading","setIsLoading","handleActionData","item","path","messageSuccess","token","window","localStorage","getItem","newToken","replace","Service","send","method","data","query","headers","Authorization","then","res","statusCode","message","toast","success","warn","useEffect","serverSideColumns","name","selector","sortable","maxWidth","minWidth","cell","row","key","onBlur","e","value","target","type","defaultValue","bsSize","onChange","text","Ripple","onClick","color","size","status","className","style","border","noHeader","columns","progressPending","memo"],"mappings":"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","file":"static/js/21.b34bb673.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, memo, useState, useEffect } from 'react'\nimport './index.scss'\nimport _ from 'lodash'\nimport { toast } from 'react-toastify';\nimport Service from '../../../services/request'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\n\nimport DataTable from 'react-data-table-component'\nimport {\n  Card,\n  Button,\n  Input\n} from 'reactstrap'\n\nconst DataTableServerSide = () => {\n  // ** Store Vars\n  const [items, setItems] = useState({})\n  const [isLoading, setIsLoading] = useState(false)\n\n  // ** React hook form vars\n\n\n  function handleActionData(item, path, messageSuccess) {\n    const token = window.localStorage.getItem('accessToken')\n\n    if (token) {\n      const newToken = token.replace(/\"/g, \"\");\n\n      Service.send({\n        method: 'POST', path, data: item, query: null, headers: {\n          Authorization: `Bearer ` + newToken\n        }\n      }).then(res => {\n        if (res) {\n          const { statusCode, message } = res\n          if (statusCode === 200) {\n            toast.success(`${messageSuccess} successful!`)\n\n          } else {\n            toast.warn(message || 'Something was wrong!')\n          }\n        }\n      })\n    }\n  }\n\n  function getData() {\n    setIsLoading(true)\n  \n      // @ts-ignore\n      Service.send({\n        method: 'POST', path: 'Maintain/getSystemStatus', data: {}\n      }).then(res => {\n        if (res) {\n          const { statusCode, data, message } = res\n          if (statusCode === 200) {\n\n            setItems(data)\n          } else {\n            toast.warn(message || 'Something was wrong!')\n          }\n        }\n        setIsLoading(false)\n      })\n    \n  }\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  const serverSideColumns = [\n    {\n      name: '',\n      selector: 'text',\n      sortable: true,\n      maxWidth: '200px'\n    },\n    {\n      name: 'Status',\n      selector: 'text',\n      sortable: true,\n      minWidth: '250px',\n      cell: (row) => {\n        const { key } = row\n        if(key ===\"maintainMessage\"){\n          \n          return (\n            <Input onBlur={(e) => {\n              const { value } = e.target\n              \n              setItems({\n                ...items,\n                [key]: value\n              })\n            }} type='text' defaultValue={items[key]} name={key} bsSize='sm' >\n            \n            </Input>\n          )\n        }\n        return (\n          <Input onChange={(e) => {\n            const { value } = e.target\n\n            setItems({\n              ...items,\n              [key]: value === 'true'\n            })\n          }} type='select' value={items[key] || false} name={key} bsSize='sm' >\n            <option value={true}>On</option>\n            <option value={false}>Off</option>\n          </Input>\n        )\n       \n      }\n    },\n    {\n      name: 'Action',\n      selector: 'action',\n      cell: (row) => {\n        const {\n          text,\n          path,\n          key\n        } = row\n\n        if(key ===\"maintainMessage\"){\n          return (\n            <>\n              <Button.Ripple onClick={() => {\n                handleActionData({\n                  message: items[key] || \"\",\n                }, path, text)\n              }} color='primary' size=\"sm\">{'Update'}</Button.Ripple>\n            </>\n          )\n        }\n        return (\n          <>\n            <Button.Ripple onClick={() => {\n              handleActionData({\n                status: items[key] || false,\n              }, path, text)\n            }} color='primary' size=\"sm\">{'Update'}</Button.Ripple>\n          </>\n        )\n      }\n    }\n  ]\n\n  return (\n    <Fragment>\n      <Card className=\"accountAdmin\">\n        <h2 style={{ border: 'unset' }} className=\"content-header-title mb-2\" >Maintain WEB</h2>\n\n        <DataTable\n          noHeader\n          className='react-dataTable'\n          columns={serverSideColumns}\n          data={[\n            {\n              text: 'ALL WEB',\n              path: 'Maintain/maintainAll',\n              key: 'all'\n            },\n            {\n              text: 'Live Game',\n              path: 'Maintain/maintainLiveGame',\n              key: 'liveGame'\n            },\n            {\n              text: 'Deposit',\n              path: 'Maintain/maintainDeposit',\n              key: 'deposit'\n            },\n           \n            {\n              text: 'Withdraw',\n              path: 'Maintain/maintainWithdraw',\n              key: 'withdraw'\n            },\n            {\n              text: 'Signup New USER',\n              path: 'Maintain/maintainSignup',\n              key: 'signup'\n            },\n            {\n              text: 'Text Forgot Password',\n              path: 'Maintain/maintainForgotPassword',\n              key: 'maintainMessage'\n            }\n\n          ]}\n          progressPending={isLoading}\n        />\n      </Card>\n\n\n    </Fragment >\n  )\n}\n\nexport default memo(DataTableServerSide)\n"],"sourceRoot":""}