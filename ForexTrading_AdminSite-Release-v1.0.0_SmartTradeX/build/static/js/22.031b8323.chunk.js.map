{"version":3,"sources":["views/pages/payment-method/index.js"],"names":["DefaultFilter","filter","skip","limit","order","key","value","DataTableServerSide","serverSideColumns","name","selector","sortable","maxWidth","minWidth","cell","row","createdAt","moment","format","userPaymentMethodId","userPaymentMethodName","userPaymentMethodIdentityNumber","userPaymentMethodReferName","userPaymentMethodReceiverName","className","color","size","caret","right","href","onClick","e","preventDefault","setModal","setUserData","handleUpdateData","id","data","isDeleted","useState","paramsFilter","setParamsFilter","modal","currentPage","setCurrentPage","rowsPerPage","setRowsPerPage","total","setTotal","items","setItems","isLoading","setIsLoading","useForm","defaultValues","register","errors","handleSubmit","userData","getData","params","isNoLoading","newParams","Object","keys","forEach","token","window","localStorage","getItem","newToken","replace","Service","send","method","path","query","headers","Authorization","then","res","statusCode","message","toast","warn","clear","item","messageSuccess","success","_","debounce","useEffect","handleOnchange","sm","for","type","bsSize","onChange","parseInt","target","handlePerPage","Ripple","noHeader","pagination","paginationServer","columns","sortIcon","paginationComponent","count","Number","Math","ceil","toFixed","previousLabel","nextLabel","breakLabel","pageCount","marginPagesDisplayed","pageRangeDisplayed","activeClassName","forcePage","onPageChange","page","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","breakClassName","breakLinkClassName","containerClassName","progressPending","isOpen","toggle","onSubmit","innerRef","required","invalid","placeholder","memo"],"mappings":"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","file":"static/js/22.031b8323.chunk.js","sourcesContent":["// @ts-nocheck\n// ** React Imports\nimport { Fragment, useState, useEffect, memo } from 'react'\n// ** Store & Actions\nimport { useDispatch } from 'react-redux'\nimport { toast } from 'react-toastify';\nimport { MoreVertical, Edit, Delete } from 'react-feather'\nimport _ from 'lodash'\nimport './index.scss'\nimport { useForm } from 'react-hook-form'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nimport Service from '../../../services/request'\nimport ReactPaginate from 'react-paginate'\nimport { ChevronDown, } from 'react-feather'\nimport DataTable from 'react-data-table-component'\nimport { number_to_price } from \"./../../../helper/common\"\nimport {\n  Card, Input, Label, Row, Col, UncontrolledDropdown, DropdownMenu, DropdownItem, DropdownToggle, InputGroup,\n  InputGroupButtonDropdown, Modal, ModalHeader, ModalBody,\n  Button, FormGroup, Form\n} from 'reactstrap'\nimport moment from 'moment'\nconst statusOptions = [\n  { value: '', label: 'All Status' },\n  { value: 'New', label: 'New' },\n  { value: 'Waiting', label: 'Waiting' },\n  { value: 'Pending', label: 'Pending' },\n  { value: 'Completed', label: 'Completed' },\n  { value: 'Deleted', label: 'Deleted' },\n  { value: 'Canceled', label: 'Canceled' },\n]\n\n\nconst DefaultFilter = {\n  filter: {\n   \n  },\n  skip: 0,\n  limit: 20,\n  order: {\n    key: \"createdAt\",\n    value: \"desc\"\n  }\n}\nconst List_Search_Filter = [\n  \"userPaymentMethodName\",\n  \"userPaymentMethodReceiverName\",\n  \"userPaymentMethodReferName\",\n  \"userPaymentMethodReceiverName\",\n]\nconst DataTableServerSide = () => {\n  // ** Store Vars\n  const serverSideColumns = [\n    {\n      name: 'ID',\n      selector: 'userPaymentMethodId',\n      sortable: true,\n      maxWidth: '60px'\n    },\n    {\n      name: 'Payment Method Name',\n      selector: 'userPaymentMethodName',\n      sortable: true,\n      minWidth: '100px'\n    },\n    {\n      name: 'IdentityNumber',\n      selector: 'userPaymentMethodIdentityNumber',\n      sortable: true,\n      minWidth: '200px'\n    },\n    {\n      name: 'Payment Method ReferName',\n      selector: 'userPaymentMethodReferName',\n      sortable: true,\n      maxWidth: '200px'\n    },\n    {\n      name: 'Payment Method Receiver Name',\n      selector: 'userPaymentMethodReceiverName',\n      sortable: true,\n      maxWidth: '200px'\n    }\n     ,\n    {\n      name: 'Created',\n      selector: 'salary',\n      sortable: true,\n      maxWidth: '200px',\n      cell: (row) => {\n        const { createdAt } = row\n\n        return (\n          <div>\n            {moment(createdAt).format('lll')}\n          </div>\n        )\n      }\n    },\n    {\n      name: 'Action',\n      selector: 'action',\n      cell: (row) => {\n        const {\n          userPaymentMethodId,\n          userPaymentMethodName,\n          userPaymentMethodIdentityNumber,\n          userPaymentMethodReferName,\n          userPaymentMethodReceiverName\n        } = row\n        return (\n          <UncontrolledDropdown>\n            <DropdownToggle className='icon-btn hide-arrow' color='transparent' size='sm' caret>\n              <MoreVertical size={15} />\n            </DropdownToggle>\n            <DropdownMenu right>\n              <DropdownItem href='/' onClick={e => {\n                e.preventDefault(); setModal(true); setUserData({\n                  userPaymentMethodId,\n                  userPaymentMethodName,\n                  userPaymentMethodIdentityNumber,\n                  userPaymentMethodReferName,\n                  userPaymentMethodReceiverName\n                })\n              }}>\n                <Edit className='mr-50' size={15} /> <span className='align-middle'>Edit</span>\n              </DropdownItem>\n              <DropdownItem href='/' onClick={e => {\n                e.preventDefault();\n                handleUpdateData({\n                  id: userPaymentMethodId, \n                  data: {\n                    isDeleted: true\n                  }\n                })\n              }}>\n                <Delete className='mr-50' size={15} /> <span className='align-middle'>Delete</span>\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n        )\n      }\n    }\n  ]\n  const [paramsFilter, setParamsFilter] = useState(DefaultFilter)\n \n  // ** States\n  const [modal, setModal] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [rowsPerPage, setRowsPerPage] = useState(20)\n  const [total, setTotal] = useState(20)\n  const [items, setItems] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [searchValue, setSearchValue] = useState('')\n  const [searchField, setSearchField] = useState('userPaymentMethodName')\n  const [dropdownOpen, setDropdownOpen] = useState(false)\n  // ** React hook form vars\n  const { register, errors, handleSubmit } = useForm({\n    defaultValues: {}\n  })\n  const [userData, setUserData] = useState({})\n\n  function getData(params, isNoLoading) {\n    const newParams = {\n      ...params\n    }\n    if (!isNoLoading) {\n      setIsLoading(true)\n    }\n    Object.keys(newParams.filter).forEach(key => {\n      if (!newParams.filter[key] || newParams.filter[key] === '') {\n        delete newParams.filter[key]\n      }\n    })\n    const token = window.localStorage.getItem('accessToken')\n\n    if (token) {\n      const newToken = token.replace(/\"/g, \"\");\n\n      Service.send({\n        method: 'POST', path: 'UserPaymentMethod/getList', data: newParams, query: null, headers: {\n          Authorization: `Bearer ` + newToken\n        }\n      }).then(res => {\n        if (res) {\n          const { statusCode, data, message } = res\n          setParamsFilter(newParams)\n          if (statusCode === 200) {\n            setTotal(data.total)\n            setItems(data.data)\n          } else {\n            toast.warn(message || 'Something was wrong!')\n          }\n        } else {\n          setTotal(1)\n          setItems([])\n        }\n        if (!isNoLoading) {\n          setIsLoading(false)\n        }\n      })\n    } else {\n      window.localStorage.clear()\n    }\n  }\n\n  function handleUpdateData(item, messageSuccess) {\n   \n      Service.send({\n        method: 'POST', path: 'UserPaymentMethod/updateById', data: item, query: null\n      }).then(res => {\n        if (res) {\n          const { statusCode, message } = res\n          if (statusCode === 200) {\n            toast.success(messageSuccess || 'Action update successful!')\n            getData(paramsFilter)\n          } else {\n            toast.warn(message || 'Something was wrong!')\n          }\n        }\n      })\n    \n  }\n\n  function handleAddPaymentData(item) {\n   \n    Service.send({\n      method: 'POST', path: 'UserPaymentMethod/insert', data: item, query: null\n    }).then(res => {\n      if (res) {\n        const { statusCode, message } = res\n        if (statusCode === 200) {\n          toast.success( 'Action successful!')\n          getData(paramsFilter)\n        } else {\n          toast.warn(message || 'Something was wrong!')\n        }\n      }\n    })\n  \n}\n\n  const getDataSearch = _.debounce((params) => {\n    getData(params, true)\n  }, 2000);\n\n  // ** Get data on mount\n  useEffect(() => {\n    getData(paramsFilter)\n  }, [])\n\n  // ** Function to handle filter\n  const handleFilter = e => {\n    const { value } = e.target\n    setSearchValue()\n    const newParams = {\n      ...paramsFilter,\n      filter: {\n        ...paramsFilter.filter,\n        [searchField]: value,\n      },\n      skip: 0\n    }\n    getDataSearch(newParams)\n\n  }\n\n  // ** Function to handle Pagination and get data\n  const handlePagination = page => {\n\n    const newParams = {\n      ...paramsFilter,\n      skip: (page.selected) * paramsFilter.limit\n    }\n    getData(newParams)\n    setCurrentPage(page.selected + 1)\n\n  }\n\n  // ** Function to handle per page\n  const handlePerPage = e => {\n\n    const newParams = {\n      ...paramsFilter,\n      limit: parseInt(e.target.value),\n      skip: 0\n    }\n    getData(newParams)\n    setCurrentPage(1)\n    setRowsPerPage(parseInt(e.target.value))\n  }\n\n  const handleChangeSearchField = (filed) => {\n    const newParams = {\n      ...paramsFilter,\n      skip: 0,\n    }\n    List_Search_Filter.forEach(text => {\n      delete newParams.filter[text]\n    })\n    newParams.filter[filed] = ''\n    setSearchValue('')\n    setSearchField(filed)\n    getData(newParams)\n  }\n\n  const handleFilterChange = (name, value) => {\n    const newParams = {\n      ...paramsFilter,\n      filter: {\n        ...paramsFilter.filter,\n        [name]: value\n      },\n      skip: 0,\n    }\n    getData(newParams)\n  }\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(total / rowsPerPage).toFixed(0))\n\n    return (\n      <ReactPaginate\n        previousLabel={''}\n        nextLabel={''}\n        breakLabel='...'\n        pageCount={count || 1}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={2}\n        activeClassName='active'\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={page => handlePagination(page)}\n        pageClassName={'page-item'}\n        nextLinkClassName={'page-link'}\n        nextClassName={'page-item next'}\n        previousClassName={'page-item prev'}\n        previousLinkClassName={'page-link'}\n        pageLinkClassName={'page-link'}\n        breakClassName='page-item'\n        breakLinkClassName='page-link'\n        containerClassName={\n          'pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\n        }\n      />\n    )\n  }\n\n  const toggleDropDown = () => {\n    setDropdownOpen(!dropdownOpen)\n  }\n\n  const handleOnchange = (name, value) => {\n    setUserData(\n      {\n        ...userData,\n        [name]: value\n      }\n    )\n  }\n\n  return (\n    <Fragment>\n      <Card>\n\n        <Row className='mx-0 mt-1 mb-50'>\n          <Col sm='11'>\n            <div className='d-flex align-items-center'>\n              <Label for='sort-select'>show</Label>\n              <Input\n                className='dataTable-select'\n                type='select'\n                bsSize='sm'\n                id='sort-select'\n                value={rowsPerPage}\n                onChange={e => handlePerPage(e)}\n              >\n\n                <option value={20}>20</option>\n                <option value={50}>50</option>\n                <option value={100}>100</option>\n              </Input>\n              <Label for='sort-select'>entries</Label>\n            </div>\n          </Col>\n          <Col sm=\"1\">\n            <Button.Ripple color='primary'\n              size=\"sm\"\n              onClick={() => {\n                setModal(true);\n                 setUserData({\n                  \n                })\n              }}>\n              Add\n            </Button.Ripple>\n          </Col>\n          {/* <Col sm='2'>\n            <Input onChange={(e) => {\n              const { name, value } = e.target\n              handleFilterChange(name, value)\n            }} type='select' value={paramsFilter.filter ? (paramsFilter.filter.active || '') : ''} name='active' bsSize='sm' >\n              {\n                statusOptions.map(item => {\n                  return <option value={item.value}>{item.label}</option>\n                })\n              }\n            </Input>\n          </Col>\n         */}\n          {/* <Col className='d-flex align-items-center justify-content-sm-end mt-sm-0 mt-1' sm='6'>\n            <Label className='mr-1' for='search-input'>\n              Search\n            </Label>\n            <InputGroup className=\"input-search-group\">\n              <InputGroupButtonDropdown addonType='prepend' isOpen={dropdownOpen} toggle={toggleDropDown}>\n                <DropdownToggle size=\"sm\" color='primary' caret outline>\n                  {searchField}\n                </DropdownToggle>\n                <DropdownMenu>\n                  {\n                    List_Search_Filter.map(text => (\n                      <DropdownItem className=\"dropdownItem-search\" onClick={() => { handleChangeSearchField(text) }} key={text}>{text}</DropdownItem>\n                    ))\n                  }\n\n\n                </DropdownMenu>\n              </InputGroupButtonDropdown>\n\n              <Input\n                className='dataTable-filter'\n                type='text'\n                bsSize='sm'\n                id='search-input'\n                value={searchValue}\n                onChange={(e) => { handleFilter(e) }}\n              />\n            </InputGroup>\n\n          </Col> */}\n        \n        </Row>\n        <DataTable\n          noHeader\n          pagination\n          paginationServer\n          className='react-dataTable'\n          columns={serverSideColumns}\n          sortIcon={<ChevronDown size={10} />}\n          paginationComponent={CustomPagination}\n          data={items}\n          progressPending={isLoading}\n        />\n      </Card>\n\n      <Modal\n        isOpen={modal}\n        toggle={() => setModal(false)}\n        className={`modal-dialog-centered `}\n\n      >\n        <ModalHeader toggle={() => setModal(false)}>\n          {userData.userPaymentMethodId ? \"Edit\" : \"Add\"} Payment Method Info\n          </ModalHeader>\n        <ModalBody>\n          <Form onSubmit={handleSubmit((data) => {\n            if(userData.userPaymentMethodId){\n              handleUpdateData({\n                id: userData.userPaymentMethodId,\n                data\n              })\n            }else{\n              handleAddPaymentData(data)\n            }\n            \n            setModal(false)\n          })}>\n          \n            <FormGroup>\n              <Label for='userPaymentMethodName'>Payment Method Name</Label>\n              <Input\n                id='userPaymentMethodName'\n                name='userPaymentMethodName'\n                innerRef={register({ required: true })}\n                invalid={errors.userPaymentMethodName && true}\n                placeholder='ATM / BANK'\n                value={userData.userPaymentMethodName || ''}\n                onChange={(e) => {\n                  const { name, value } = e.target\n                  handleOnchange(name, value)\n                }}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for='userPaymentMethodIdentityNumber'>Payment Method IdentityNumber</Label>\n              <Input\n                id='userPaymentMethodIdentityNumber'\n                name='userPaymentMethodIdentityNumber'\n                innerRef={register({ required: true })}\n                invalid={errors.userPaymentMethodIdentityNumber && true}\n                placeholder='1234789'\n                value={userData.userPaymentMethodIdentityNumber || ''}\n                onChange={(e) => {\n                  const { name, value } = e.target\n                  handleOnchange(name, value)\n                }}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for='userPaymentMethodReferName'>Payment Method Refer Name</Label>\n              <Input\n                id='userPaymentMethodReferName'\n                name='userPaymentMethodReferName'\n                innerRef={register({ required: true })}\n                invalid={errors.userPaymentMethodReferName && true}\n                placeholder='Citi Bank'\n                value={userData.userPaymentMethodReferName || ''}\n                onChange={(e) => {\n                  const { name, value } = e.target\n                  handleOnchange(name, value)\n                }}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for='userPaymentMethodReceiverName'>Payment Method Receiver Name</Label>\n              <Input\n                name='userPaymentMethodReceiverName'\n                id='userPaymentMethodReceiverName'\n                innerRef={register({ required: true })}\n                invalid={errors.userPaymentMethodReceiverName && true}\n                value={userData.userPaymentMethodReceiverName || \"\"}\n                placeholder='David Beckam'\n                onChange={(e) => {\n                  const { name, value } = e.target\n                  handleOnchange(name, value)\n                }}\n              />\n            </FormGroup>\n\n            <FormGroup className='d-flex mb-0'>\n              <Button.Ripple className='mr-1' color='primary' type='submit'>\n                Submit\n            </Button.Ripple>\n\n            </FormGroup>\n          </Form>\n        </ModalBody>\n\n      </Modal>\n\n    </Fragment >\n  )\n}\n\nexport default memo(DataTableServerSide)\n"],"sourceRoot":""}