{"version":3,"sources":["../node_modules/reactstrap/es/InputGroup.js","../node_modules/reactstrap/es/InputGroupButtonDropdown.js","views/pages/withdraw/index.js"],"names":["propTypes","tag","tagPropType","size","PropTypes","string","className","cssModule","object","InputGroup","props","Tag","attributes","_objectWithoutPropertiesLoose","classes","mapToCssModules","classNames","React","createElement","_extends","defaultProps","addonType","oneOf","isRequired","children","node","InputGroupButtonDropdown","Dropdown","statusOptions","value","label","DefaultFilter","filter","status","skip","limit","order","key","List_Search_Filter","DataTableServerSide","useState","modal","setModal","useForm","defaultValues","register","errors","handleSubmit","userData","setUserData","showModal","setShowModal","note","setNote","serverSideColumns","name","selector","sortable","minWidth","cell","row","pointAmount","number_to_price","createdAt","moment","format","href","onClick","e","preventDefault","withdrawTransactionId","color","caret","right","item","messageSuccess","id","Service","send","method","path","data","query","then","res","statusCode","message","toast","success","getData","paramsFilter","warn","setParamsFilter","currentPage","setCurrentPage","rowsPerPage","setRowsPerPage","total","setTotal","items","setItems","isLoading","setIsLoading","searchValue","setSearchValue","searchField","setSearchField","dropdownOpen","setDropdownOpen","params","isNoLoading","newParams","Object","keys","forEach","token","window","localStorage","getItem","newToken","replace","headers","Authorization","clear","getDataSearch","_","debounce","useEffect","sm","for","type","bsSize","onChange","parseInt","target","handlePerPage","handleFilterChange","map","isOpen","toggle","outline","text","filed","handleChangeSearchField","handleFilter","noHeader","pagination","paginationServer","columns","sortIcon","paginationComponent","count","Number","Math","ceil","toFixed","previousLabel","nextLabel","breakLabel","pageCount","marginPagesDisplayed","pageRangeDisplayed","activeClassName","forcePage","onPageChange","page","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","breakClassName","breakLinkClassName","containerClassName","progressPending","onSubmit","handleUpdateData","innerRef","required","invalid","handleOnchange","index","Ripple","memo"],"mappings":"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","file":"static/js/25.2c5dac27.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { mapToCssModules, tagPropType } from './utils';\nvar propTypes = {\n  tag: tagPropType,\n  size: PropTypes.string,\n  className: PropTypes.string,\n  cssModule: PropTypes.object\n};\nvar defaultProps = {\n  tag: 'div'\n};\n\nvar InputGroup = function InputGroup(props) {\n  var className = props.className,\n      cssModule = props.cssModule,\n      Tag = props.tag,\n      size = props.size,\n      attributes = _objectWithoutPropertiesLoose(props, [\"className\", \"cssModule\", \"tag\", \"size\"]);\n\n  var classes = mapToCssModules(classNames(className, 'input-group', size ? \"input-group-\" + size : null), cssModule);\n  return /*#__PURE__*/React.createElement(Tag, _extends({}, attributes, {\n    className: classes\n  }));\n};\n\nInputGroup.propTypes = propTypes;\nInputGroup.defaultProps = defaultProps;\nexport default InputGroup;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Dropdown from './Dropdown';\nvar propTypes = {\n  addonType: PropTypes.oneOf(['prepend', 'append']).isRequired,\n  children: PropTypes.node\n};\n\nvar InputGroupButtonDropdown = function InputGroupButtonDropdown(props) {\n  return /*#__PURE__*/React.createElement(Dropdown, props);\n};\n\nInputGroupButtonDropdown.propTypes = propTypes;\nexport default InputGroupButtonDropdown;","// @ts-nocheck\n// ** React Imports\nimport { Fragment, useState, useEffect, memo } from 'react'\n// ** Store & Actions\nimport { toast } from 'react-toastify';\nimport _ from 'lodash'\nimport Service from '../../../services/request'\nimport ReactPaginate from 'react-paginate'\nimport { ChevronDown, Send, XOctagon, MoreVertical } from 'react-feather'\nimport DataTable from 'react-data-table-component'\nimport { useForm } from 'react-hook-form'\nimport {\n  Card, Input, Label, Row, Col, UncontrolledDropdown, DropdownMenu, DropdownItem, DropdownToggle, InputGroup,\n  InputGroupButtonDropdown, Modal, ModalHeader, ModalBody,\n  Button, FormGroup, Form\n} from 'reactstrap'\nimport { number_to_price } from \"./../../../helper/common\"\nimport moment from \"moment\"\nconst statusOptions = [\n  { value: '', label: 'All Status' },\n  { value: 'New', label: 'New' },\n  { value: 'Waiting', label: 'Waiting' },\n  { value: 'Pending', label: 'Pending' },\n  { value: 'Completed', label: 'Completed' },\n  { value: 'Deleted', label: 'Deleted' },\n  { value: 'Canceled', label: 'Canceled' },\n]\n\nconst DefaultFilter = {\n  filter: {\n    status: ''\n  },\n  skip: 0,\n  limit: 20,\n  order: {\n    key: \"createdAt\",\n    value: \"desc\"\n  }\n}\nconst List_Search_Filter = [\n  \"userName\",\n  \"phoneNumber\",\n]\nconst DataTableServerSide = () => {\n  const [modal, setModal] = useState(false)\n  const { register, errors, handleSubmit } = useForm({\n    defaultValues: {}\n  })\n  const [userData, setUserData] = useState({})\n  const [showModal, setShowModal] = useState(false)\n  const [note, setNote] = useState(\"\")\n  // ** Store Vars\n  const serverSideColumns = [\n    {\n      name: 'ID',\n      selector: 'withdrawTransactionId',\n      sortable: true,\n    },\n    {\n      name: 'Username',\n      selector: 'username',\n      sortable: true,\n      minWidth: '100px'\n    },\n    {\n      name: 'Phone Number',\n      selector: 'phoneNumber',\n      sortable: true,\n      minWidth: '200px'\n    },\n    \n    {\n      name: 'Amount',\n      selector: 'pointAmount',\n      sortable: true,\n      cell: (row)=>{\n        const {\n          pointAmount\n        } = row\n        return (\n          <>\n          {number_to_price(pointAmount)}\n          </>\n        )\n      }\n    },\n    {\n      name: 'createdAt',\n      selector: 'salary',\n      sortable: true,\n      minWidth: \"200px\",\n      cell: (row) => {\n        const { createdAt } = row\n        return (\n          <div>\n            {createdAt ? moment(createdAt).format('lll') : \"N/A\"}\n          </div>\n        )\n      }\n    },\n    {\n      name: 'note',\n      selector: 'note',\n      sortable: true,\n      cell: (row) => {\n        const { note } = row\n        if(note){\n          return (\n            <a href=\"/\" onClick={(e)=>{\n              e.preventDefault()\n              setShowModal(row)\n              setNote(note)\n            }}>\n             Note\n            </a>\n          )\n        }\n        return \"\"\n       \n      }\n    },\n    {\n      name: 'Status',\n      selector: 'status',\n      sortable: true,\n    },\n    {\n      name: 'Action',\n      selector: 'action',\n      cell: (row) => {\n        const {\n          withdrawTransactionId, status\n        } = row\n        if(status !== \"Canceled\" && status !==\"Completed\"){\n          return (\n            <UncontrolledDropdown>\n              <DropdownToggle className='icon-btn hide-arrow' color='transparent' size='sm' caret>\n                <MoreVertical size={15} />\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem href='/' onClick={e => {\n                  e.preventDefault()\n                  handleApprove({ id: withdrawTransactionId })\n                }}>\n                  <Send className='mr-50' size={15} /> <span className='align-middle'>Approve</span>\n                </DropdownItem>\n                <DropdownItem href='/' onClick={e => {\n                  e.preventDefault()\n                  handleDeny({ id: withdrawTransactionId })\n                }}>\n                  <XOctagon className='mr-50' size={15} /> <span className='align-middle'>Deny</span>\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          )\n        }\n        return \"\"\n       \n      }\n    }\n  ]\n  const [paramsFilter, setParamsFilter] = useState(DefaultFilter)\n\n  // ** States\n\n  const [currentPage, setCurrentPage] = useState(1)\n  const [rowsPerPage, setRowsPerPage] = useState(20)\n  const [total, setTotal] = useState(20)\n  const [items, setItems] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [searchValue, setSearchValue] = useState('')\n  const [searchField, setSearchField] = useState('username')\n  const [dropdownOpen, setDropdownOpen] = useState(false)\n  \n  // ** React hook form vars\n\n  function getData(params, isNoLoading) {\n    const newParams = {\n      ...params\n    }\n\n    if (!isNoLoading) {\n      setIsLoading(true)\n    }\n    Object.keys(newParams.filter).forEach(key => {\n      if (!newParams.filter[key] || newParams.filter[key] === '') {\n        delete newParams.filter[key]\n      }\n    })\n    const token = window.localStorage.getItem('accessToken')\n\n    if (token) {\n      const newToken = token.replace(/\"/g, \"\");\n\n      Service.send({\n        method: 'POST', path: 'WithdrawTransaction/getList', data: newParams, query: null, headers: {\n          Authorization: `Bearer ` + newToken\n        }\n      }).then(res => {\n        if (res) {\n          const { statusCode, data, message } = res\n          setParamsFilter(newParams)\n          if (statusCode === 200) {\n            setTotal(data.total)\n            setItems(data.data)\n\n          } else {\n            toast.warn(message || 'Something was wrong!')\n          }\n        } else {\n          setTotal(1)\n          setItems([])\n        }\n        if (!isNoLoading) {\n          setIsLoading(false)\n        }\n      })\n    } else {\n      window.localStorage.clear()\n    }\n  }\n\n  function handleUpdateData(item, messageSuccess) {\n    const token = window.localStorage.getItem('accessToken')\n\n    if (token) {\n      const newToken = token.replace(/\"/g, \"\");\n\n      Service.send({\n        method: 'POST', path: 'WithdrawTransaction/acceptRequest', data: item, query: null, headers: {\n          Authorization: `Bearer ` + newToken\n        }\n      }).then(res => {\n        if (res) {\n          const { statusCode, message } = res\n          if (statusCode === 200) {\n            toast.success(messageSuccess || 'Action update successful!')\n            getData(paramsFilter)\n          } else {\n            toast.warn(message || 'Something was wrong!')\n          }\n        }\n      })\n    }\n  }\n\n\n  function handleApprove(item, messageSuccess) {\n    Service.send({\n      method: 'POST', path: 'WithdrawTransaction/acceptRequest', data: item, query: null\n    }).then(res => {\n      if (res) {\n        const { statusCode, message } = res\n        if (statusCode === 200) {\n          toast.success(messageSuccess || 'Action update successful!')\n          getData(paramsFilter)\n        } else {\n          toast.warn(message || 'Something was wrong!')\n        }\n      }\n\n    })\n  \n\n}\n\nfunction handleDeny(item, messageSuccess) {\n  Service.send({\n    method: 'POST', path: 'WithdrawTransaction/rejectRequest', data: item, query: null\n  }).then(res => {\n    if (res) {\n      const { statusCode, message } = res\n      if (statusCode === 200) {\n        toast.success(messageSuccess || 'Action update successful!')\n        getData(paramsFilter)\n      } else {\n        toast.warn(message || 'Something was wrong!')\n      }\n    }\n\n  })\n\n\n}\n\n  const getDataSearch = _.debounce((params) => {\n    getData(params, true)\n  }, 2000);\n\n  // ** Get data on mount\n  useEffect(() => {\n    getData(paramsFilter)\n  }, [])\n\n  // ** Function to handle filter\n  const handleFilter = e => {\n    const { value } = e.target\n    setSearchValue()\n    const newParams = {\n      ...paramsFilter,\n      filter: {\n        ...paramsFilter.filter,\n        [searchField]: value,\n      },\n      skip: 0\n    }\n    getDataSearch(newParams)\n\n  }\n\n  // ** Function to handle Pagination and get data\n  const handlePagination = page => {\n\n    const newParams = {\n      ...paramsFilter,\n      skip: (page.selected) * paramsFilter.limit\n    }\n    getData(newParams)\n    setCurrentPage(page.selected + 1)\n\n  }\n\n  // ** Function to handle per page\n  const handlePerPage = e => {\n\n    const newParams = {\n      ...paramsFilter,\n      limit: parseInt(e.target.value),\n      skip: 0\n    }\n    getData(newParams)\n    setCurrentPage(1)\n    setRowsPerPage(parseInt(e.target.value))\n  }\n\n  const handleChangeSearchField = (filed) => {\n    const newParams = {\n      ...paramsFilter,\n      skip: 0,\n    }\n    List_Search_Filter.forEach(text => {\n      delete newParams.filter[text]\n    })\n    newParams.filter[filed] = ''\n    setSearchValue('')\n    setSearchField(filed)\n    getData(newParams)\n  }\n\n  const handleFilterChange = (name, value) => {\n    const newParams = {\n      ...paramsFilter,\n      filter: {\n        ...paramsFilter.filter,\n        [name]: value\n      },\n      skip: 0,\n    }\n    getData(newParams)\n  }\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(total / rowsPerPage).toFixed(0))\n\n    return (\n      <ReactPaginate\n        previousLabel={''}\n        nextLabel={''}\n        breakLabel='...'\n        pageCount={count || 1}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={2}\n        activeClassName='active'\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={page => handlePagination(page)}\n        pageClassName={'page-item'}\n        nextLinkClassName={'page-link'}\n        nextClassName={'page-item next'}\n        previousClassName={'page-item prev'}\n        previousLinkClassName={'page-link'}\n        pageLinkClassName={'page-link'}\n        breakClassName='page-item'\n        breakLinkClassName='page-link'\n        containerClassName={\n          'pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\n        }\n      />\n    )\n  }\n\n  const toggleDropDown = () => {\n    setDropdownOpen(!dropdownOpen)\n  }\n\n  const handleOnchange = (name, value) => {\n    setUserData(\n      {\n        ...userData,\n        [name]: value\n      }\n    )\n  }\n\n  return (\n    <Fragment>\n      <Card>\n      \n        <Row className='mx-0 mt-1 mb-50'>\n          <Col sm='6'>\n            <div className='d-flex align-items-center'>\n              <Label for='sort-select'>show</Label>\n              <Input\n                className='dataTable-select'\n                type='select'\n                bsSize='sm'\n                id='sort-select'\n                value={rowsPerPage}\n                onChange={e => handlePerPage(e)}\n              >\n                <option value={20}>20</option>\n                <option value={50}>50</option>\n                <option value={100}>100</option>\n              </Input>\n              <Label for='sort-select'>entries</Label>\n            </div>\n          </Col>\n          <Col sm='2'>\n            <Input onChange={(e) => {\n              const { name, value } = e.target\n              handleFilterChange(name, value)\n            }} type='select' value={paramsFilter.filter ? (paramsFilter.filter.status || 0) : ''} name='status' bsSize='sm' >\n              {\n                statusOptions.map(item => {\n                  return <option value={item.value}>{item.label}</option>\n                })\n              }\n            </Input>\n          </Col>\n          <Col className='d-flex align-items-center justify-content-sm-end mt-sm-0 mt-1' sm='4'>\n            <Label className='mr-1' for='search-input'>\n              Search\n            </Label>\n            <InputGroup className=\"input-search-group\">\n              <InputGroupButtonDropdown addonType='prepend' isOpen={dropdownOpen} toggle={toggleDropDown}>\n                <DropdownToggle size=\"sm\" color='primary' caret outline>\n                  {searchField}\n                </DropdownToggle>\n                <DropdownMenu>\n                  {\n                    List_Search_Filter.map(text => (\n                      <DropdownItem className=\"dropdownItem-search\" onClick={() => { handleChangeSearchField(text) }} key={text}>{text}</DropdownItem>\n                    ))\n                  }\n\n\n                </DropdownMenu>\n              </InputGroupButtonDropdown>\n\n              <Input\n                className='dataTable-filter'\n                type='text'\n                bsSize='sm'\n                id='search-input'\n                value={searchValue}\n                onChange={(e) => { handleFilter(e) }}\n              />\n            </InputGroup>\n\n          </Col>\n        </Row>\n        <DataTable\n          noHeader\n          pagination\n          paginationServer\n          className='react-dataTable'\n          columns={serverSideColumns}\n          sortIcon={<ChevronDown size={10} />}\n          paginationComponent={CustomPagination}\n          data={items}\n          progressPending={isLoading}\n        />\n      </Card>\n\n      <Modal\n        isOpen={modal}\n        toggle={() => setModal(false)}\n        className={`modal-dialog-centered `}\n\n      >\n        <ModalHeader toggle={() => setModal(false)}>\n          Edit Withdraw Info\n          </ModalHeader>\n        <ModalBody>\n          <Form onSubmit={handleSubmit((data) => {\n            handleUpdateData({\n              id: userData.id,\n              data\n            })\n            setModal(false)\n          })}>\n            <FormGroup>\n              <Label >Status</Label>\n              <Input\n                type='select'\n                name='status'\n                innerRef={register({ required: true })}\n                invalid={errors.status && true}\n                value={userData.status}\n                onChange={(e) => {\n                  const { name, value } = e.target\n                  handleOnchange(name, value)\n                }}\n              >\n                {\n                  statusOptions.map((item, index) => {\n                    if (index > 0) {\n                      return <option value={item.value}>{item.label}</option>\n                    }\n                    return null\n                  })\n                }\n\n\n              </Input>\n            </FormGroup>\n            {/* <FormGroup>\n              <Label for='ethAmount'>Amount (ETH)</Label>\n              <Input\n                id='ethAmount'\n                name='ethAmount'\n                innerRef={register({ required: true })}\n                invalid={errors.ethAmount && true}\n                placeholder='Amount (ETH)'\n                value={userData.ethAmount || 0}\n                onChange={(e) => {\n                  const { name, value } = e.target\n                  handleOnchange(name, value)\n                }}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for='pointAmount'>Amount (BIT)</Label>\n              <Input\n\n                id='pointAmount'\n                name='pointAmount'\n                innerRef={register({ required: true })}\n                invalid={errors.pointAmount && true}\n                placeholder='Amount (BIT)'\n                value={userData.pointAmount || 0}\n                onChange={(e) => {\n                  const { name, value } = e.target\n                  handleOnchange(name, value)\n                }}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <Label for='ethPrice'>ETH Price</Label>\n              <Input\n\n                id='ethPrice'\n                name='ethPrice'\n                innerRef={register({ required: true })}\n                invalid={errors.ethPrice && true}\n                placeholder='ETH Price'\n                value={userData.ethPrice || 0}\n                onChange={(e) => {\n                  const { name, value } = e.target\n                  handleOnchange(name, value)\n                }}\n              />\n            </FormGroup>\n\n\n            <FormGroup>\n              <Label for='ethBegin'>Balance Before</Label>\n              <Input\n\n                id='ethBegin'\n                name='ethBegin'\n                innerRef={register({ required: true })}\n                invalid={errors.ethBegin && true}\n                placeholder='Balance Before'\n                value={userData.ethBegin || 0}\n                onChange={(e) => {\n                  const { name, value } = e.target\n                  handleOnchange(name, value)\n                }}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <Label for='ethEnd'>Balance After</Label>\n              <Input\n\n                id='ethEnd'\n                name='ethEnd'\n                innerRef={register({ required: true })}\n                invalid={errors.ethEnd && true}\n                placeholder='Balance After'\n                value={userData.ethEnd || 0}\n                onChange={(e) => {\n                  const { name, value } = e.target\n                  handleOnchange(name, value)\n                }}\n              />\n            </FormGroup>\n\n\n            <FormGroup>\n              <Label for='walletAddress'>To Address</Label>\n              <Input\n\n                id='walletAddress'\n                name='walletAddress'\n                innerRef={register({ required: true })}\n                invalid={errors.walletAddress && true}\n                placeholder='To Address'\n                value={userData.walletAddress || ''}\n                onChange={(e) => {\n                  const { name, value } = e.target\n                  handleOnchange(name, value)\n                }}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <Label for='ethGasFee'>Gas fee (ETH)</Label>\n              <Input\n\n                id='ethGasFee'\n                name='ethGasFee'\n                innerRef={register({ required: true })}\n                invalid={errors.ethGasFee && true}\n                placeholder='Gas fee (ETH)'\n                value={userData.ethGasFee || 0}\n                onChange={(e) => {\n                  const { name, value } = e.target\n                  handleOnchange(name, value)\n                }}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <Label for='ethFee'>Fee (ETH)</Label>\n              <Input\n\n                id='ethFee'\n                name='ethFee'\n                innerRef={register({ required: true })}\n                invalid={errors.ethFee && true}\n                placeholder='Fee (ETH)'\n                value={userData.ethFee || 0}\n                onChange={(e) => {\n                  const { name, value } = e.target\n                  handleOnchange(name, value)\n                }}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for='hash'>Txn Hash</Label>\n              <Input\n\n                id='hash'\n                name='hash'\n                innerRef={register({ required: true })}\n                invalid={errors.hash && true}\n                placeholder='Txn Hash'\n                value={userData.hash || 0}\n                onChange={(e) => {\n                  const { name, value } = e.target\n                  handleOnchange(name, value)\n                }}\n              />\n            </FormGroup> */}\n\n            <FormGroup className='d-flex mb-0'>\n              <Button.Ripple className='mr-1' color='primary' type='submit'>\n                Submit\n            </Button.Ripple>\n\n            </FormGroup>\n          </Form>\n        </ModalBody>\n\n      </Modal>\n      <Modal\n        isOpen={showModal}\n        toggle={() => setShowModal(false)}\n        className={`modal-dialog-centered `}\n      >\n        <ModalBody>\n         {note}\n            \n        </ModalBody>\n\n      </Modal>\n    </Fragment >\n  )\n}\n\nexport default memo(DataTableServerSide)\n"],"sourceRoot":""}