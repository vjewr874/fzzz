{"version":3,"sources":["views/pages/game-control/index.js"],"names":["unitOptions","value","label","DefaultFilter","filter","gameRecordUnit","skip","limit","order","key","DataTableServerSide","serverSideColumns","name","selector","sortable","cell","row","gameRecordPrice","number_to_price","replace","gameRecordSection","gameRecordNote","gameRecordTypeUp","className","gameRecordTypeOdd","gameRecordTypeDown","gameRecordTypeEven","gameRecordStatus","gameRecordId","color","size","caret","right","href","onClick","e","preventDefault","setModal","setUserData","useState","paramsFilter","setParamsFilter","modal","modalMany","setModalMany","currentPage","setCurrentPage","rowsPerPage","setRowsPerPage","total","setTotal","items","setItems","isLoading","setIsLoading","sectionList","setSectionList","useForm","defaultValues","register","errors","handleSubmit","userData","getData","params","isNoLoading","newParams","Object","keys","forEach","token","window","localStorage","getItem","newToken","Service","send","method","path","data","query","headers","Authorization","then","res","statusCode","message","toast","warn","clear","_","debounce","useEffect","handleOnchange","sm","for","type","bsSize","id","onChange","parseInt","target","handlePerPage","handleFilterChange","map","item","Ripple","gameRecordCount","moment","format","noHeader","pagination","paginationServer","columns","sortIcon","paginationComponent","count","Number","Math","ceil","toFixed","previousLabel","nextLabel","breakLabel","pageCount","marginPagesDisplayed","pageRangeDisplayed","activeClassName","forcePage","onPageChange","page","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","breakClassName","breakLinkClassName","containerClassName","progressPending","isOpen","toggle","onSubmit","messageSuccess","success","handleAddData","innerRef","required","invalid","index","check","inline","checked","memo"],"mappings":"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","file":"static/js/18.6e11fbfa.chunk.js","sourcesContent":["// @ts-nocheck\n// ** React Imports\nimport { Fragment, useState, useEffect, memo } from 'react'\n// ** Store & Actions\nimport { toast } from 'react-toastify';\nimport { MoreVertical, Edit, Lock } from 'react-feather'\nimport _ from 'lodash'\nimport './index.scss'\nimport { useForm } from 'react-hook-form'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nimport Service from '../../../services/request'\nimport ReactPaginate from 'react-paginate'\nimport { ChevronDown, } from 'react-feather'\nimport DataTable from 'react-data-table-component'\nimport {\n  Card, Input, Label, Row, Col, UncontrolledDropdown, DropdownMenu, DropdownItem, DropdownToggle, InputGroup,\n  InputGroupButtonDropdown, Modal, ModalHeader, ModalBody,\n  Button, FormGroup, Form\n} from 'reactstrap'\nimport { number_to_price } from \"./../../../helper/common\"\nimport Flatpickr from 'react-flatpickr'\nimport moment from \"moment\"\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nconst statusOptions = [\n \n  { value: 'New', label: 'New' },\n  { value: 'Waiting', label: 'Waiting' },\n  { value: 'Pending', label: 'Pending' },\n  { value: 'Completed', label: 'Completed' },\n  { value: 'Deleted', label: 'Deleted' },\n  { value: 'Canceled', label: 'Canceled' },\n]\n\nconst unitOptions = [\n  { value: 'ETH-USD', label: 'ETH' },\n  { value: 'BTC-USD', label: 'BTC' },\n]\n\nconst DefaultFilter = {\n  filter: {\n    gameRecordUnit: \"BTC-USD\"\n  },\n  skip: 0,\n  limit: 20,\n  order: {\n    key: \"createdAt\",\n    value: \"desc\"\n  }\n}\nconst List_Search_Filter = [\n  \"username\",\n  \"email\",\n  \"referUser\",\n  \"phoneNumber\",\n]\nconst DataTableServerSide = () => {\n \n  // ** Store Vars\n  const serverSideColumns = [\n    {\n      name: 'Id',\n      selector: 'gameRecordId',\n      sortable: true,\n    },\n    {\n      name: 'Price',\n      selector: 'gameRecordPrice',\n      sortable: true,\n      cell: (row) => {\n        const { gameRecordPrice } = row\n        return (\n          <div>\n            {number_to_price(gameRecordPrice)}\n          </div>\n        )\n      }\n    },\n    {\n      name: 'Unit',\n      selector: 'gameRecordUnit',\n      sortable: true,\n\n      cell: (row) => {\n        const { gameRecordUnit } = row\n\n        return (\n          <div>\n            {gameRecordUnit.replace(\"-USD\", \"\")}\n          </div>\n        )\n      }\n    },\n    {\n      name: 'Section',\n      selector: 'gameRecordSection',\n      sortable: true,\n\n      cell: (row) => {\n        const { gameRecordSection } = row\n\n        return (\n          <div>\n            {gameRecordSection}\n          </div>\n        )\n      }\n    },\n    {\n      name: 'Note',\n      selector: 'gameRecordNote',\n      sortable: true,\n      cell: (row) => {\n        const { gameRecordNote } = row\n\n        return (\n          <div>\n            {gameRecordNote}\n          </div>\n        )\n      }\n    },\n    {\n      name: 'Up/Down',\n      selector: 'gameRecordStatus',\n      sortable: true,\n      cell: (row) => {\n        const { gameRecordTypeUp } = row\n\n        return (\n          <div className={gameRecordTypeUp? \"gameRecordTypeUp\" : \"gameRecordTypeDonw\"}>\n            {gameRecordTypeUp? \"L\" : \"X\"}\n          </div>\n        )\n      }\n    },\n    {\n      name: 'Odd/Even',\n      selector: 'gameRecordStatus',\n      sortable: true,\n      cell: (row) => {\n        const { gameRecordTypeOdd } = row\n\n        return (\n          <div className={gameRecordTypeOdd? \"gameRecordTypeOdd\" : \"gameRecordTypeEven\"}>\n            {gameRecordTypeOdd? \"L\" : \"C\"}\n          </div>\n        )\n      }\n    },\n\n    {\n      name: 'Status',\n      selector: 'gameRecordStatus',\n      sortable: true,\n    },\n    {\n      name: 'Action',\n      selector: 'action',\n      cell: (row) => {\n        const {\n          gameRecordPrice,\n          gameRecordTypeUp,\n          gameRecordTypeDown,\n          gameRecordTypeOdd,\n          gameRecordTypeEven,\n          gameRecordUnit,\n          gameRecordSection,\n          gameRecordNote,\n          gameRecordStatus,\n          gameRecordId\n        } = row\n        return (\n          <UncontrolledDropdown>\n            <DropdownToggle className='icon-btn hide-arrow' color='transparent' size='sm' caret>\n              <MoreVertical size={15} />\n            </DropdownToggle>\n            <DropdownMenu right>\n              <DropdownItem href='/' onClick={e => {\n                e.preventDefault(); setModal(true); setUserData({\n                  gameRecordPrice,\n                  gameRecordTypeUp,\n                  gameRecordTypeDown,\n                  gameRecordTypeOdd,\n                  gameRecordTypeEven,\n                  gameRecordUnit,\n                  gameRecordSection,\n                  gameRecordNote,\n                  gameRecordStatus,\n                  gameRecordId\n                })\n              }}>\n                <Edit className='mr-50' size={15} /> <span className='align-middle'>Edit</span>\n              </DropdownItem>\n             \n            </DropdownMenu>\n\n          </UncontrolledDropdown>\n        )\n      }\n    }\n  ]\n  const [paramsFilter, setParamsFilter] = useState(DefaultFilter)\n  // ** States\n  \n  const [modal, setModal] = useState(false)\n  const [modalMany, setModalMany] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [rowsPerPage, setRowsPerPage] = useState(20)\n  const [total, setTotal] = useState(20)\n  const [items, setItems] = useState([])\n  const [isLoading, setIsLoading] = useState(false)\n  const [searchValue, setSearchValue] = useState('')\n  const [searchField, setSearchField] = useState('username')\n  const [dropdownOpen, setDropdownOpen] = useState(false)\n  const [sectionList, setSectionList] = useState([])\n  // ** React hook form vars\n  const { register, errors, handleSubmit } = useForm({\n    defaultValues: {}\n  })\n  const [userData, setUserData] = useState({})\n\n  function getData(params, isNoLoading) {\n    const newParams = {\n      ...params\n    }\n    if (!isNoLoading) {\n      setIsLoading(true)\n    }\n    Object.keys(newParams.filter).forEach(key => {\n      if (!newParams.filter[key] || newParams.filter[key] === '') {\n        delete newParams.filter[key]\n      }\n    })\n    const token = window.localStorage.getItem('accessToken')\n\n    if (token) {\n      const newToken = token.replace(/\"/g, \"\");\n\n      Service.send({\n        method: 'POST', path: 'Game/getList', data: newParams, query: null, headers: {\n          Authorization: `Bearer ` + newToken\n        }\n      }).then(res => {\n        if (res) {\n          const { statusCode, data, message } = res\n          setParamsFilter(newParams)\n          if (statusCode === 200) {\n            setTotal(data.total)\n            setItems(data.data)\n          } else {\n            toast.warn(message || 'Something was wrong!')\n          }\n        } else {\n          setTotal(1)\n          setItems([])\n        }\n        if (!isNoLoading) {\n          setIsLoading(false)\n        }\n      })\n    } else {\n      window.localStorage.clear()\n    }\n  }\n\n  function handleFetchSection() {\n   \n    Service.send({\n      method: 'POST', path: 'Game/gameSectionList', data: {}, query: null\n    }).then(res => {\n      if (res) {\n        const { statusCode, data } = res\n        if (statusCode === 200) {\n          \n          setSectionList(data.data)\n\n        } \n      }\n\n    })\n  \n\n}\n \n\n  function handleUpdateData(item, messageSuccess) {\n   \n      Service.send({\n        method: 'POST', path: 'Game/updateById', data: item, query: null\n      }).then(res => {\n        if (res) {\n          const { statusCode, message } = res\n          if (statusCode === 200) {\n            toast.success(messageSuccess || 'Action update successful!')\n            getData(paramsFilter)\n          } else {\n            toast.warn(message || 'Something was wrong!')\n          }\n        }\n\n      })\n    \n\n  }\n\n\n  function handleAddData(item, messageSuccess) {\n  \n      Service.send({\n        method: 'POST', path: 'Game/insert', data: item, query: null\n      }).then(res => {\n        if (res) {\n          const { statusCode, message } = res\n          if (statusCode === 200) {\n            toast.success(messageSuccess || 'Action Add Game Control successful!')\n            getData(paramsFilter)\n          } else {\n            toast.warn(message || 'Something was wrong!')\n          }\n        }\n\n      })\n    \n\n  }\n\n  function handleAddDataMany(item, messageSuccess) {\n  \n    Service.send({\n      method: 'POST', path: 'Game/insertMany', data: item, query: null\n    }).then(res => {\n      if (res) {\n        const { statusCode, message } = res\n        if (statusCode === 200) {\n          toast.success(messageSuccess || 'Action Add Many Game Control successful!')\n          getData(paramsFilter)\n        } else {\n          toast.warn(message || 'Something was wrong!')\n        }\n      }\n\n    })\n  \n\n}\n\n\n  const getDataSearch = _.debounce((params) => {\n    getData(params, true)\n  }, 2000);\n\n  // ** Get data on mount\n  useEffect(() => {\n    getData(paramsFilter)\n    handleFetchSection()\n  }, [])\n\n  // ** Function to handle filter\n  const handleFilter = e => {\n    const { value } = e.target\n    setSearchValue()\n    const newParams = {\n      ...paramsFilter,\n      filter: {\n        ...paramsFilter.filter,\n        [searchField]: value,\n      },\n      skip: 0\n    }\n    getDataSearch(newParams)\n\n  }\n\n  // ** Function to handle Pagination and get data\n  const handlePagination = page => {\n\n    const newParams = {\n      ...paramsFilter,\n      skip: (page.selected) * paramsFilter.limit\n    }\n    getData(newParams)\n    setCurrentPage(page.selected + 1)\n\n  }\n\n  // ** Function to handle per page\n  const handlePerPage = e => {\n\n    const newParams = {\n      ...paramsFilter,\n      limit: parseInt(e.target.value),\n      skip: 0\n    }\n    getData(newParams)\n    setCurrentPage(1)\n    setRowsPerPage(parseInt(e.target.value))\n  }\n\n  const handleChangeSearchField = (filed) => {\n    const newParams = {\n      ...paramsFilter,\n      skip: 0,\n    }\n    List_Search_Filter.forEach(text => {\n      delete newParams.filter[text]\n    })\n    newParams.filter[filed] = ''\n    setSearchValue('')\n    setSearchField(filed)\n    getData(newParams)\n  }\n\n  const handleFilterChange = (name, value) => {\n    const newParams = {\n      ...paramsFilter,\n      filter: {\n        ...paramsFilter.filter,\n        [name]: value\n      },\n      skip: 0,\n    }\n    getData(newParams)\n  }\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(total / rowsPerPage).toFixed(0))\n\n    return (\n      <ReactPaginate\n        previousLabel={''}\n        nextLabel={''}\n        breakLabel='...'\n        pageCount={count || 1}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={2}\n        activeClassName='active'\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={page => handlePagination(page)}\n        pageClassName={'page-item'}\n        nextLinkClassName={'page-link'}\n        nextClassName={'page-item next'}\n        previousClassName={'page-item prev'}\n        previousLinkClassName={'page-link'}\n        pageLinkClassName={'page-link'}\n        breakClassName='page-item'\n        breakLinkClassName='page-link'\n        containerClassName={\n          'pagination react-paginate separated-pagination pagination-sm justify-content-end pr-1 mt-1'\n        }\n      />\n    )\n  }\n\n  const toggleDropDown = () => {\n    setDropdownOpen(!dropdownOpen)\n  }\n\n  const handleOnchange = (name, value) => {\n    setUserData(\n      {\n        ...userData,\n        [name]: value\n      }\n    )\n  }\n\n  return (\n    <Fragment>\n      <Card className=\"accountAdmin\">\n        <Row className='mx-0 mt-1 mb-50'>\n          <Col sm='8'>\n            <div className='d-flex align-items-center'>\n              <Label for='sort-select'>show</Label>\n              <Input\n                className='dataTable-select'\n                type='select'\n                bsSize='sm'\n                id='sort-select'\n                value={rowsPerPage}\n                onChange={e => handlePerPage(e)}\n              >\n\n                <option value={20}>20</option>\n                <option value={50}>50</option>\n                <option value={100}>100</option>\n              </Input>\n              <Label for='sort-select'>entries</Label>\n            </div>\n          </Col>\n          <Col sm='2'>\n            <Input onChange={(e) => {\n              const { name, value } = e.target\n              handleFilterChange(name, value)\n            }} type='select' value={paramsFilter.filter ? (paramsFilter.filter.gameRecordUnit || '') : ''} name='gameRecordUnit' bsSize='sm' >\n              {\n                unitOptions.map(item => {\n                  return <option value={item.value}>{item.label}</option>\n                })\n              }\n            </Input>\n          </Col>\n          <Col sm=\"1\">\n            <Button.Ripple color='primary'\n              size=\"sm\"\n              onClick={() => {\n                setModalMany(true)\n                setUserData({\n                  gameRecordUnit: \"ETH-USD\",\n                  gameRecordCount: 10,\n                  gameRecordSection: moment().format(\"HH:mm\")+ \":00\"\n                })\n                \n              }}>\n              Records\n             </Button.Ripple>\n          </Col>\n\n          <Col sm=\"1\">\n            <Button.Ripple color='primary'\n              size=\"sm\"\n              onClick={() => {\n                setModal(true)\n                setUserData({\n                  gameRecordTypeUp: 1,\n                  gameRecordTypeOdd: 1,\n                  gameRecordUnit: \"ETH-USD\",\n                  gameRecordStatus: \"New\",\n                  gameRecordSection: moment().format(\"HH:mm\")+ \":00\"\n                })\n              }}>\n              Add\n             </Button.Ripple>\n          </Col>\n       \n        </Row>\n        <DataTable\n          noHeader\n          pagination\n          paginationServer\n          className='react-dataTable'\n          columns={serverSideColumns}\n          sortIcon={<ChevronDown size={10} />}\n          paginationComponent={CustomPagination}\n          data={items}\n          progressPending={isLoading}\n        />\n        <Modal\n          isOpen={modal}\n          toggle={() => setModal(false)}\n          className={`modal-dialog-centered `}\n        >\n          <ModalHeader toggle={() => setModal(false)}>\n            {userData.gameRecordId ? 'Edit' : 'Add'} Game Control\n         </ModalHeader>\n          <ModalBody>\n            <Form onSubmit={handleSubmit(() => {\n              const data= {\n                // gameRecordPrice: userData.gameRecordPrice,\n                gameRecordTypeUp: userData.gameRecordTypeUp || 0,\n                gameRecordTypeDown: userData.gameRecordTypeDown || 0,\n                gameRecordTypeOdd: userData.gameRecordTypeOdd|| 0,\n                gameRecordTypeEven: userData.gameRecordTypeEven || 0,\n                gameRecordUnit: userData.gameRecordUnit,\n                gameRecordSection: userData.gameRecordSection,\n                gameRecordNote: userData.gameRecordNote,\n                // gameRecordStatus: userData.gameRecordStatus,\n                \n              }\n              if (userData.gameRecordId) {\n                handleUpdateData({\n                  id: userData.gameRecordId,\n                  data\n                })\n              } else {\n                handleAddData(data)\n              }\n\n              setModal(false)\n            })}>  \n           \n              <FormGroup>\n                <Label for='gameRecordSection'>Section</Label>\n                <Input\n                  type='select'\n                  name='gameRecordSection'\n                  innerRef={register({ required: true })}\n                  invalid={errors.gameRecordSection && true}\n                  value={userData.gameRecordSection}\n                  onChange={(e) => {\n                    const { name, value } = e.target\n                    handleOnchange(name, value)\n                  }}\n                >\n                  {  sectionList.map((item, index) => {\n                     \n                      return <option value={item.value}>{item.label}</option>\n\n                    })\n                  }\n                  \n                </Input>\n                \n              </FormGroup>\n\n              <FormGroup>\n              <div className='demo-inline-spacing'>\n                <FormGroup check inline>\n                  <Label check>\n                    <Input onChange={(e) => {\n                    \n                      setUserData({\n                        ...userData,\n                        gameRecordTypeUp: 1,\n                        gameRecordTypeDown: 0\n                      })\n                    \n                    \n                  }} type='radio' name='gameRecordTypeUp' checked={userData.gameRecordTypeUp} /> Up\n                  </Label>\n                </FormGroup>\n                <FormGroup check inline>\n                  <Label check>\n                    <Input onChange={(e) => {\n                    \n                    setUserData({\n                      ...userData,\n                      gameRecordTypeUp: 0,\n                      gameRecordTypeDown: 1\n                    })\n                  \n                  \n                }} type='radio' name='gameRecordTypeDown' checked={userData.gameRecordTypeDown} /> Down\n                  </Label>\n                </FormGroup>\n               \n              </div>\n             \n              </FormGroup>\n              <FormGroup>\n              <div className='demo-inline-spacing'>\n                <FormGroup check inline>\n                  <Label check>\n                    <Input onChange={(e) => {\n                    \n                      setUserData({\n                        ...userData,\n                        gameRecordTypeOdd: 1,\n                        gameRecordTypeEven: 0\n                      })\n                    \n                    \n                  }} type='radio' name='gameRecordTypeOdd' checked={userData.gameRecordTypeOdd} /> Odd\n                  </Label>\n                </FormGroup>\n                <FormGroup check inline>\n                  <Label check>\n                    <Input onChange={(e) => {\n                    \n                    setUserData({\n                      ...userData,\n                      gameRecordTypeOdd: 0,\n                      gameRecordTypeEven: 1\n                    })\n                  \n                  \n                }} type='radio' name='gameRecordTypeEven' checked={userData.gameRecordTypeEven} /> Even\n                  </Label>\n                </FormGroup>\n               \n              </div>\n             \n              </FormGroup>\n\n              <FormGroup>\n              <Label >Unit</Label>\n                <Input\n                  type='select'\n                  name='gameRecordUnit'\n                  innerRef={register({ required: true })}\n                  invalid={errors.gameRecordUnit && true}\n                  value={userData.gameRecordUnit}\n                  onChange={(e) => {\n                    const { name, value } = e.target\n                    handleOnchange(name, value)\n                  }}\n                >\n                  {  unitOptions.map((item, index) => {\n                     \n                      return <option value={item.value}>{item.label}</option>\n\n                    })\n                  }\n                  \n                </Input>\n              </FormGroup>\n\n          \n              <FormGroup className='d-flex mb-0'>\n                <Button.Ripple className='mr-1' color='primary' type='submit'>\n                  Submit\n             </Button.Ripple>\n\n              </FormGroup>\n            </Form>\n          </ModalBody>\n\n        </Modal>\n        <Modal\n          isOpen={modalMany}\n          toggle={() => setModalMany(false)}\n          className={`modal-dialog-centered `}\n        >\n          <ModalHeader toggle={() => setModalMany(false)}>\n          Add Many Game Control\n         </ModalHeader>\n          <ModalBody>\n            <Form onSubmit={handleSubmit(() => {\n              \n              handleAddDataMany(userData)\n              setModalMany(false)\n            })}>  \n           \n              <FormGroup>\n                <Label for='gameRecordSection'>Section</Label>\n                <Input\n                  type='select'\n                  name='gameRecordSection'\n                  innerRef={register({ required: true })}\n                  invalid={errors.gameRecordSection && true}\n                  value={userData.gameRecordSection}\n                  onChange={(e) => {\n                    const { name, value } = e.target\n                    handleOnchange(name, value)\n                  }}\n                >\n                  {  sectionList.map((item, index) => {\n                     \n                      return <option value={item.value}>{item.label}</option>\n\n                    })\n                  }\n                  \n                </Input>\n                \n              </FormGroup>\n\n            \n              <FormGroup>\n              <Label >Record</Label>\n                <Input\n                  type='select'\n                  name='gameRecordCount'\n                  innerRef={register({ required: true })}\n                  invalid={errors.gameRecordCount && true}\n                  value={userData.gameRecordCount}\n                  onChange={(e) => {\n                    const { name, value } = e.target\n                    handleOnchange(name, value)\n                  }}\n                >\n                 <option value={10}>10</option>\n                 <option value={20}>20</option>\n                 <option value={30}>30</option>\n                 <option value={40}>40</option>\n                 <option value={50}>50</option>\n               \n                </Input>\n              </FormGroup>\n\n              <FormGroup>\n              <Label >Unit</Label>\n                <Input\n                  type='select'\n                  name='gameRecordUnit'\n                  innerRef={register({ required: true })}\n                  invalid={errors.gameRecordUnit && true}\n                  value={userData.gameRecordUnit}\n                  onChange={(e) => {\n                    const { name, value } = e.target\n                    handleOnchange(name, value)\n                  }}\n                >\n                  {  unitOptions.map((item, index) => {\n                     \n                      return <option value={item.value}>{item.label}</option>\n\n                    })\n                  }\n                  \n                </Input>\n              </FormGroup>\n\n          \n              <FormGroup className='d-flex mb-0'>\n                <Button.Ripple className='mr-1' color='primary' type='submit'>\n                  Submit\n             </Button.Ripple>\n\n              </FormGroup>\n            </Form>\n          </ModalBody>\n\n        </Modal>\n      \n      </Card>\n    </Fragment >\n  )\n}\n\nexport default memo(DataTableServerSide)\n"],"sourceRoot":""}